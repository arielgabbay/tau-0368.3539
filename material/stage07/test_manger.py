from Crypto.PublicKey import RSA

from manger import find_f1, find_f2, find_m

class PKCS1_OAEP_Oracle:
    """
    Oracle for RSA PKCS #1 OAEP
    """
    def __init__(self, k, key):
        self.n = key.n
        self.d = key.d
        self.B = 2 ** (8 * (k - 1))

    def query(self, input):
        """
        Checks if the decryption of input is less than B
        :param input: bytearray of size k, where k=n_length/8
        :return: True if (input) ** d mod n is less than B, False else
        """
        c = int.from_bytes(input, byteorder='big')
        p = pow(c, self.d, self.n)
        if p < self.B:
            return True
        return False

TEST_KEY = RSA.construct((141898826100326880554922848884150210351078102021535732565857729655043582218776471461401155036836782070682056116333192144989464167004823949002409732909631666333555799031746012847339627654632068166443971425309013886083995188408454897084128811566458895746039192339833921720394299693557159997527971220673644312493, 65537, 56664695940791534415717623299008119918489784518754469337642288215849758003076110206697432419382263813903902995568243459824515414417554168932695502082456775771387126141544091331480152448099316986092214557380357045172747881663617880704063637157037988883574787085864264243046079786016281287413375388764022483957, 12999743399535273309943952729361457357801742762045386211391744966642290316681158469815552778962095905549212573103561343921911166957306523417157851759371567, 10915509771169760880138065941853180635345881696734359527890025613777076507210320133086099622439574139572543550364385923216766909364101221573555641122206179, 7048645514527349562054430395832278647140519180175310996368861178016161341784538330412147893486715742667482676329037599111466172540309197104016865021129401))
TEST_K = 128
TEST_ORACLE = PKCS1_OAEP_Oracle(TEST_K, TEST_KEY)
TEST_C = 89874018967130642574905471281467818547598620739412658570078268015113144359936923912250545908087767958616303029841731476610802157024283225719207033190390074801728049371445321402672596247560281712272132869313063423068711259448772918351071285709597171067707805972454534026966917242200727760293453697111085515145

FIND_F1_ARGS = (
    TEST_K,
    TEST_KEY,
    TEST_C,
    TEST_ORACLE,
)
FIND_F1_RESULT = 8254602048994769474255309139320571976856989469314398783249386078541779727448825929287769623244643560854287421769642635607536680617229461519539671538483430889193541937484454440136429963694163141453503639190799818814812942074243152169349951543234944945149040326527156224

FIND_F2_ARGS = (
    TEST_K,
    TEST_KEY,
    TEST_C,
    FIND_F1_RESULT,
    TEST_ORACLE,
)
FIND_F2_RESULT = 1163898888908262495869998588644200648736835515173330228438163437074390941570284456029575516877494742080454526469519611620662671967029354074255093686926163755376289413185308076059236624880877002944944013125902774452888624832468284455878343167596127237266014686040329027584

FIND_M_ARGS = (
    TEST_K,
    TEST_KEY,
    TEST_C,
    FIND_F2_RESULT,
    TEST_ORACLE,
    True,
)
FIND_M_RESULT = 121938567302482143196439067367105134698

def main():
    f1 = find_f1(*FIND_F1_ARGS)
    assert f1 == FIND_F1_RESULT, "find_f1() isn't working!"
    print("find_f1() is working!")
    f2 = find_f2(*FIND_F2_ARGS)
    assert f2 == FIND_F2_RESULT, "find_f2() isn't working!"
    print("find_f2() is working!")
    m = find_m(*FIND_M_ARGS)
    assert m == FIND_M_RESULT, "find_m() isn't working!"
    print("find_m() is working!")

if __name__ == "__main__":
    main()
