from Crypto.Cipher import PKCS1_v1_5
from Crypto.PublicKey import RSA

from bleichenbacher import find_min_conforming, search_single_interval, narrow_m

class PKCS1_v1_5_Oracle:
    """ 
    Oracle for RSA PKCS #1 v1.5
    """
    def __init__(self, key):
        self.cipher = PKCS1_v1_5.new(key)

    def query(self, input):
        """
        Checks if input is a conforming encryption
        :param input: bytearray of size k, where k=n_length/8
        :return: True if input is a valid encryption, False else
        """
        return bool(self.cipher.decrypt(input, None))

TEST_KEY = RSA.construct((141898826100326880554922848884150210351078102021535732565857729655043582218776471461401155036836782070682056116333192144989464167004823949002409732909631666333555799031746012847339627654632068166443971425309013886083995188408454897084128811566458895746039192339833921720394299693557159997527971220673644312493, 65537, 56664695940791534415717623299008119918489784518754469337642288215849758003076110206697432419382263813903902995568243459824515414417554168932695502082456775771387126141544091331480152448099316986092214557380357045172747881663617880704063637157037988883574787085864264243046079786016281287413375388764022483957, 12999743399535273309943952729361457357801742762045386211391744966642290316681158469815552778962095905549212573103561343921911166957306523417157851759371567, 10915509771169760880138065941853180635345881696734359527890025613777076507210320133086099622439574139572543550364385923216766909364101221573555641122206179, 7048645514527349562054430395832278647140519180175310996368861178016161341784538330412147893486715742667482676329037599111466172540309197104016865021129401))
TEST_K = 128
TEST_ORACLE = PKCS1_v1_5_Oracle(TEST_KEY)
TEST_B = 2743062034396844341627968125593604635037196317966166035056000994228098690879836473582587849768181396806642362668936055872479091931372323951612051859122835149807249350355003132267795098895967012320756270631179897595796976964454084495146379250195728106130226298287754794921070036903071843030324651025760256

FIND_MIN_CONFORMING_ARGS = (
    TEST_KEY,
    105654003316807133038983085429757204695228436973156367333646907566096094725547456065230555903787075862659703321988680871266039844482487089354374688459174344388929623127594513119661344877651769930659434371145708912180996661000448522114418859571937627669379086112241009319427794852720151971962815292750704761508,
    17244,
    TEST_ORACLE,
    TEST_K,
)
FIND_MIN_CONFORMING_RESULT = 82350

SEARCH_SINGLE_INTERVAL_ARGS = (
    TEST_KEY,
    TEST_B,
    280615710116374498133346107086281605171745747736704408506599679141691473197058351797314833818707801271597816630261338020014274395806298201372150586433881811381416552657748021509853423624852325780203293865853793321151313017278738050133823217060470023562838247403110682896416254367317260553093990412338065,
    6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768782,
    6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768787,
    105654003316807133038983085429757204695228436973156367333646907566096094725547456065230555903787075862659703321988680871266039844482487089354374688459174344388929623127594513119661344877651769930659434371145708912180996661000448522114418859571937627669379086112241009319427794852720151971962815292750704761508,
    TEST_ORACLE,
    TEST_K,
)
SEARCH_SINGLE_INTERVAL_RESULT = 561231420232748996266692214172563210343491495473408817013199358283382946394116703594629667637415602543195633260522676040028548791612596402744301172867763622762833105315496043019706847249704651560406587731707586642302626034557476100267646434120940047125676494806221365792832508734634521106187980824758478

NARROW_M_ARGS = (
    TEST_KEY,
    [(6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768782, 6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768787)],
    561231420232748996266692214172563210343491495473408817013199358283382946394116703594629667637415602543195633260522676040028548791612596402744301172867763622762833105315496043019706847249704651560406587731707586642302626034557476100267646434120940047125676494806221365792832508734634521106187980824758478,
    TEST_B,
)
NARROW_M_RESULT = [(6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768787, 6892543575688853480332148759357744064690585235351165098503505436667085729430172005172732483015355756951432315357799793608984930152432176699697072100157580893094576393996506876162630667279570821349452665959038189693849396633229344216600397667049597448538801598478928634513727295735181310175152672565768787)]

def main():
    s = find_min_conforming(*FIND_MIN_CONFORMING_ARGS)
    assert s == FIND_MIN_CONFORMING_RESULT, "find_min_conforming() isn't working!"
    print("find_min_conforming() is working!")
    s = search_single_interval(*SEARCH_SINGLE_INTERVAL_ARGS)
    assert s == SEARCH_SINGLE_INTERVAL_RESULT, "search_single_interval() isn't working!"
    print("search_single_interval() is working!")
    m = narrow_m(*NARROW_M_ARGS)
    assert m == NARROW_M_RESULT, "narrow_m() isn't working!"
    print("narrow_m() is working!")

if __name__ == "__main__":
    main()
